// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Router {
  id           String   @id @default(cuid())
  friendlyName String
  address      String
  apiUsername  String
  apiPassword  String
  port         Int      @default(8728)
  lastCheckedAt DateTime?
  status       RouterStatus @default(OFFLINE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  pppoeUsers   PPPoEUser[]
  speedPlans   SpeedPlan[]
  logs         LogEntry[]
  
  @@map("routers")
}

model PPPoEUser {
  id              String        @id @default(cuid())
  routerId        String
  username        String
  password        String?
  status          PPPoEStatus   @default(ACTIVE)
  activatedAt     DateTime      @default(now())
  expiryAt        DateTime?
  importedAt      DateTime?
  source          PPPoESource   @default(MANUAL)
  lastRechargedAt DateTime?
  speedPlanId     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  router          Router        @relation(fields: [routerId], references: [id], onDelete: Cascade)
  speedPlan       SpeedPlan?    @relation(fields: [speedPlanId], references: [id], onDelete: SetNull)
  expiryAdjustments ExpiryAdjustment[]
  logs            LogEntry[]
  
  @@unique([routerId, username])
  @@map("pppoe_users")
}

model SpeedPlan {
  id          String   @id @default(cuid())
  routerId    String
  name        String
  downloadSpeed Int    // in Kbps
  uploadSpeed   Int    // in Kbps
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  router       Router       @relation(fields: [routerId], references: [id], onDelete: Cascade)
  pppoeUsers   PPPoEUser[]
  
  @@unique([routerId, name])
  @@map("speed_plans")
}

model ExpiryAdjustment {
  id             String          @id @default(cuid())
  pppoeUserId    String
  previousExpiry DateTime?
  newExpiry      DateTime?
  type           AdjustmentType
  timestamp      DateTime        @default(now())
  
  pppoeUser      PPPoEUser       @relation(fields: [pppoeUserId], references: [id], onDelete: Cascade)
  
  @@map("expiry_adjustments")
}

model LogEntry {
  id          String      @id @default(cuid())
  action      String
  routerId    String?
  pppoeUserId String?
  details     String
  timestamp   DateTime    @default(now())
  
  router      Router?     @relation(fields: [routerId], references: [id], onDelete: SetNull)
  pppoeUser   PPPoEUser?  @relation(fields: [pppoeUserId], references: [id], onDelete: SetNull)
  
  @@map("log_entries")
}

enum RouterStatus {
  ONLINE
  OFFLINE
  ERROR
}

enum PPPoEStatus {
  ACTIVE
  EXPIRED
  DISABLED
}

enum PPPoESource {
  IMPORTED
  MANUAL
}

enum AdjustmentType {
  IMPORT_SET
  RECHARGE
  MANUAL_EDIT
}